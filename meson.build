#
# Project configuration, options, modules, scripts
#

project(
    'graphene',
    'c', 'cpp',
    version: '1.2-rc1',
    license: 'LGPLv3+',

    meson_version: '>=0.55',

    default_options: [
        'c_std=c11',
        'cpp_std=c++14',
        'werror=true',
    ],
)

# we need this subdir() early, because we need scripts defined there for setting up global vars
subdir('Scripts')

prefix = get_option('prefix')
pkglibdir = join_paths(get_option('libdir'), meson.project_name())
pkgdatadir = join_paths(get_option('datadir'), meson.project_name())

direct = get_option('direct') == 'enabled'
sgx = get_option('sgx') == 'enabled'
skeleton = get_option('skeleton') == 'enabled'

dcap = get_option('dcap') == 'enabled'
ubsan = get_option('ubsan') == 'enabled'

cc = meson.get_compiler('c')
objcopy = find_program('objcopy')

# TODO: after deprecating 18.04/bionic, update this to import('python')
python3mod = import('python3')
python3 = python3mod.find_python()
python3_platlib = run_command(
    python3, get_python_platlib_prog, get_option('prefix')).stdout()
python3_pkgdir = join_paths(python3_platlib, 'graphenelibos')

pkgconfig = import('pkgconfig')

add_project_arguments(
    '-Wa,--noexecstack',

    '-Wall',
    '-Wextra',

    '-Wmissing-prototypes',
    '-Wstrict-prototypes',
    '-Wwrite-strings',

    cc.get_supported_arguments(
        '-Wtrampolines',
        '-Wnull-dereference',
    ),

    language: 'c')

if get_option('buildtype') == 'debug' or get_option('buildtype') == 'debugoptimized'
    add_project_arguments('-DDEBUG', language: 'c')
endif

#
# Common checks and flags
#

# Not all compilers support mstack-protector-guard, so use stack protector only if supported.
# Graphene-custom stack protector uses the canary stored in the TCB (same for both in LibOS and PAL)
# at offset 0x8.
if host_machine.cpu_family() == 'x86_64'
    cflags_custom_stack_protector = [
        '-fstack-protector-strong',
        '-mstack-protector-guard=tls',
        '-mstack-protector-guard-reg=%gs',
        '-mstack-protector-guard-offset=8',
    ]
else
    cflags_custom_stack_protector = [
        '-fstack-protector-strong',
    ]
endif

if not cc.has_multi_arguments(cflags_custom_stack_protector)
    cflags_custom_stack_protector = '-fno-stack-protector'
endif

# Don't support b_sanitize: integration with sanitizers in Graphene is tricky and we want more
# control over the exact flags.
if get_option('b_sanitize') != 'none'
    error('Please don\'t use the b_sanitize option; use -Dubsan=enabled instead.')
endif

cflags_sanitizers = []
if ubsan
    cflags_sanitizers += [
        '-fsanitize=undefined',
        '-fno-sanitize-recover=undefined',
        '-DUBSAN',
    ]
endif

#
# Dependencies
#

if sgx
    threads_dep = dependency('threads')

    mbedtls_proj = subproject('mbedtls-mbedtls-2.26.0')
    mbedtls_dep = mbedtls_proj.get_variable('mbedtls_dep')

    libcurl_dep = dependency('libcurl', version: '>=7.58.0')

    cjson_dep = dependency('cjson', required: false)
    if not cjson_dep.found()
        # on Debian < 11 .pc file is not installed and dependency() fails, so we fallback to
        # cc.find_library()
        cjson_dep = cc.find_library('cjson', required: false)
    endif
    if not cjson_dep.found()
        # Ubuntu 18.04 does not have cjson at all
        cjson_dep = subproject('cJSON-1.7.12').get_variable('cjson_dep')
    endif

    if dcap
        sgx_dcap_quoteverify_dep = cc.find_library('sgx_dcap_quoteverify')
    endif
endif

#
# The compilation
#

subdir('common')
subdir('Pal')
subdir('LibOS')
subdir('Runtime')
subdir('python')

run_target('clang-format', command: [meson_clang_format_prog])
