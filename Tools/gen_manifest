#!/usr/bin/env python2

import argparse
import os
import pathlib
import re
import shutil
import subprocess
import sys

try:
    fspath = os.fspath # pylint: disable=invalid-name
except AttributeError:
    # python < 3.6
    fspath = str # pylint: disable=invalid-name

TEMPLATE = '''\
#!{shebang}

loader.preload = file:../../../../../Runtime/libsysdb.so
loader.exec = file:{bin_path}
loader.execname = {bin_name}
loader.env.LD_LIBRARY_PATH = {ld_library_path}

loader.env.PATH = /usr/local/bin:/usr/bin:/bin
loader.env.USERNAME =
loader.env.PWD =
loader.debug_type = none

# File system setting
fs.mount.lib1.type = chroot
fs.mount.lib1.path = /graphene
fs.mount.lib1.uri = file:../../../../../Runtime

fs.mount.lib2.type = chroot
fs.mount.lib2.path = /host
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

fs.mount.bin.type = chroot
fs.mount.bin.path = /bin
fs.mount.bin.uri = file:/bin

fs.mount.usr.type = chroot
fs.mount.usr.path = /usr
fs.mount.usr.uri = file:/usr

fs.mount.etc.type = chroot
fs.mount.etc.path = /etc
fs.mount.etc.uri = file:

fs.mount.opt.type = chroot
fs.mount.opt.path = /opt
fs.mount.opt.uri = file:

# Set Dependent Libraries
sgx.trusted_files.ld = file:../../../../../Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:../../../../../Runtime/libc.so.6
sgx.trusted_files.libdl = file:../../../../../Runtime/libdl.so.2
sgx.trusted_files.libm = file:../../../../../Runtime/libm.so.6
sgx.trusted_files.libpthread = file:../../../../../Runtime/libpthread.so.0
sgx.trusted_files.libutil = file:../../../../../Runtime/libutil.so.1
sgx.trusted_files.libnss_dns = file:../../../../../Runtime/libnss_dns.so.2
sgx.trusted_files.libresolv = file:../../../../../Runtime/libresolv.so.2
sgx.trusted_files.librt = file:../../../../../Runtime/librt.so.1
{lib_list}
'''

RUNTIME_LIBS = [
    'libc',
    'libdl',
    'libm',
    'libnss_dns',
    'libpthread',
    'libresolv',
    'librt',
    'libutil',
]

argparser = argparse.ArgumentParser()
argparser.add_argument('app_name', metavar='APP-NAME',
    help='application name')
argparser.add_argument('bin_name', metavar='BIN-NAME',
    help='actual binary name')
argparser.add_argument('g_path', metavar='GRAPHENE-PATH',
    type=pathlib.Path,
    help='path to graphene')

def parse_libs(bin_path):
    ldd_out = subprocess.check_output(['ldd', bin_path])
    for line in ldd_out.splitlines():
        match = re.match(r'\t(.*) => (.*) \(0x', line)
        if match and match.group(1) and match.group(2):
            name_match = re.match(r'([\w\d]*)(-*)([\w\d]*)(\.*)(.*)', match.group(1))
            if name_match:
                lib_name = name_match.group(1)

                # library can be formatted as libxxx-xxx.so which is invalid format in
                # the manifest, so reformat to libxxx_xxx as the option key
                if name_match.group(2) == '-' and name_match.group(3):
                    lib_name += '_' + name_match.group(3)

                if lib_name not in RUNTIME_LIBS:
                    yield lib_name, match.group(2)


def make_executable(path):
    mode = path.stat().st_mode
    mode |= (mode & 0o444) >> 2      # copy R bits to X
    path.chmod(mode)


def main(args=None):
    args = argparser.parse_args(args)

    m_path = (args.g_path / 'LibOS/shim/test/apps' /
        args.app_name / args.app_name + '.manifest')
    print('generating manifest: {}'.format(m_path), file=sys.stderr)

    bin_path = shutil.which(args.bin_name)

    ld_library_path = (
        '/graphene:/graphene/resolv:/host:'
        '/usr/local/lib:/usr/lib:/usr/lib/x86_64-linux-gnu')
    if 'LD_LIBRARY_PATH' in os.environ and os.environ['LD_LIBRARY_PATH']:
        ld_library_path += ':' + os.environ['LD_LIBRARY_PATH']

    lib_list = '\n'.join('sgx.trusted_files.{lib_name} = file:{lib_path}'
        for lib_name, lib_path in parse_libs(bin_path))

    with open(fspath(m_path), 'w') as file:
        make_executable(m_path)

        file.write(TEMPLATE.format(
            shebang=args.g_path / 'Runtime/pal_loader',
            bin_name=args.bin_name,
            bin_path=bin_path,
            ld_library_path=ld_library_path,
            lib_list=lib_list,
        ))

if __name__ == '__main__':
    main()
