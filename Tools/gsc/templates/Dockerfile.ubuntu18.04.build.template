# Include previously-prepared Docker image with Graphene (if any) or compile Graphene from sources
{% if Graphene.Image %}
FROM gsc-{{Graphene.Image}} AS graphene
{% else %}
{% include "Dockerfile.ubuntu18.04.compile.template" %}
{% endif %}

# Combine Graphene image with the original app image
FROM {{app_image}}

RUN apt-get update \
    && env DEBIAN_FRONTEND=noninteractive apt-get install -y \
        binutils \
        libprotobuf-c-dev \
        locales \
        locales-all \
        openssl \
        python3 \
        python3-pip \
        python3-protobuf \
    && python3 -B -m pip install protobuf jinja2

{% if debug %}
RUN env DEBIAN_FRONTEND=noninteractive apt-get install -y gdb less strace vim python3-pyelftools
{% endif %}

RUN locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# Copy Graphene runtime and signer tools to /graphene
RUN mkdir -p /graphene \
    && mkdir -p /graphene/Pal/src \
    && mkdir -p /graphene/Runtime \
    && mkdir -p /graphene/Scripts \
    && mkdir -p /graphene/Tools \
    && mkdir -p /graphene/python
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/generated_offsets.py /graphene/python/
COPY --from=graphene /graphene/Runtime/ /graphene/Runtime
COPY --from=graphene /graphene/Scripts/Makefile.configs /graphene/Scripts
COPY --from=graphene /graphene/Scripts/Makefile.Host /graphene/Scripts
COPY --from=graphene /graphene/Tools/argv_serializer /graphene/Tools
COPY --from=graphene /graphene/python /graphene/python

{% if debug %}
COPY --from=graphene /graphene/Pal/gdb_integration/debug_map_gdb.py \
                     /graphene/Pal/gdb_integration/
COPY --from=graphene /graphene/Pal/gdb_integration/pagination_gdb.py \
                     /graphene/Pal/gdb_integration/
COPY --from=graphene /graphene/Pal/gdb_integration/graphene.gdb \
                     /graphene/Pal/gdb_integration/

COPY --from=graphene /graphene/Pal/src/host/Linux/gdb_integration/graphene_linux_gdb.py \
                     /graphene/Pal/src/host/Linux/gdb_integration/
RUN ln -sf /graphene/Pal/gdb_integration /graphene/Pal/src/host/Linux/gdb_integration/common

COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/sgx_gdb.so \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/graphene_sgx_gdb.py \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/graphene_sgx.gdb \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
RUN ln -sf /graphene/Pal/gdb_integration /graphene/Pal/src/host/Linux-SGX/gdb_integration/common
{% endif %}

# Copy helper scripts and Graphene manifest
COPY *.py /
COPY apploader.sh /
COPY entrypoint.manifest /

# For convenience (e.g. for debugging), create a link to pal_loader in the root dir
RUN ln -sf /graphene/Runtime/pal_loader

# Generate trusted arguments if required
{% if not insecure_args %}
RUN /graphene/Tools/argv_serializer {{binary}} {{binary_arguments}} "{{"\" \"".join(cmd)}}" > /trusted_argv
{% endif %}

# Docker entrypoint/cmd typically contains only the basename of the executable so create a symlink
RUN cd / \
    && which {{binary}} | xargs ln -s || true

# Mark apploader.sh executable, finalize manifest, and remove intermediate scripts
RUN chmod u+x /apploader.sh \
    && python3 -B /finalize_manifest.py \
    && rm -f /finalize_manifest.py

# Define default command
ENTRYPOINT ["/bin/bash", "/apploader.sh"]
CMD [{% if insecure_args %} "{{'", "'.join(cmd)}}" {% endif %}]
