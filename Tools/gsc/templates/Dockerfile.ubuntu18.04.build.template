{% if not Graphene.Image %}

{% include "Dockerfile.ubuntu18.04.compile.template" %}

{% else %}

# Include graphene via Docker image
From {{Graphene.Image}} AS graphene

{% endif %}

# Integrate Graphene into the app image
# This file is used in a multistage docker build process, in which the previous image is named "graphene"
FROM {{app_image}}

# Update any packages
RUN apt-get update \
    && env DEBIAN_FRONTEND=noninteractive apt-get install -y \
        python3 \
        python3-pip \
        python3-protobuf \
        libprotobuf-c-dev \
        binutils \
        openssl \
    && python3 -B -m pip install protobuf jinja2

{% if debug %}
# Install GDB and related tools when Debug is enabled
RUN env DEBIAN_FRONTEND=noninteractive apt-get install -y \
    gdb \
    less \
    strace \
    vim
{% endif %}

# Copy Graphene runtime and signer tools to /graphene
RUN mkdir -p /graphene \
    && mkdir -p /graphene/Runtime \
    && mkdir -p /graphene/python \
    && mkdir -p /graphene/Tools \
    && mkdir -p /graphene/Pal/src
COPY --from=graphene /graphene/Runtime/ /graphene/Runtime
COPY --from=graphene /graphene/python /graphene/python
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/generated_offsets.py /graphene/python/
COPY --from=graphene /graphene/Tools/argv_serializer /graphene/Tools
{% if debug %}
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/sgx_gdb.so \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/graphene_sgx_gdb.py \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/gdb_integration/graphene_sgx.gdb \
                     /graphene/Pal/src/host/Linux-SGX/gdb_integration/
{% endif %}

# Copy template scripts and manifests
COPY apploader.sh ./
COPY *.manifest ./
COPY *.py ./

{% if not insecure_args %}
# Generate trusted arguments
RUN /graphene/Tools/argv_serializer {{binary}} {{binary_arguments}} "{{"\" \"".join(cmd)}}" > trusted_argv
{% endif %}

# Mark apploader.sh executable, finalize manifests, and remove intermediate scripts
RUN chmod u+x apploader.sh \
    && python3 -B finalize_manifests.py / {{binary}}.manifest {{user_manifests}} \
    && rm -f finalize_manifests.py

# Define default command
ENTRYPOINT ["/bin/sh", "./apploader.sh"]
CMD [{% if insecure_args %} "{{'", "'.join(cmd)}}" {% endif %}]
