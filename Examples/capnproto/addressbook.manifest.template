# Cap'n Proto sample (Addressbook) manifest file
#
# This manifest was prepared and tested on Ubuntu 16.04 and Ubuntu 18.04.

# The binary to execute.
libos.entrypoint = "file:addressbook"

# LibOS layer library of Graphene (currently only one implementation, libsysdb)
loader.preload = "file:{{ graphene.libos }}"

# Graphene log level
loader.log_level = "{{ log_level }}"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Specify paths to search for libraries (usual LD_LIBRARY_PATH syntax)
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

# Mount host-OS directory to Graphene glibc/runtime libraries
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

# Mount host-OS directory to Name Service Switch (NSS) libraries
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# Mount host-OS directory to libcapnp lib required by Addressbook
fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr/{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr/{{ arch_libdir }}"

# Mount host-OS directory to NSS files required by Glibc + NSS libs
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Set enclave size (somewhat arbitrarily) to 256MB.
sgx.enclave_size = "256M"

# Set maximum number of in-enclave threads (somewhat arbitrarily) to 8
sgx.thread_num = 8

sgx.trusted_files.addressbook = "file:addressbook"
sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}/"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"
sgx.trusted_files.usr_arch_libdir = "file:/usr/{{ arch_libdir }}/"
