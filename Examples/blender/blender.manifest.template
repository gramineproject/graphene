# INSECURE!!!
# These 3 lines are insecure by design and should never be used in production environments.
# There is a lot of files that Blender uses (e.g. bundled Python) and listing them here would
# be counter productive, as they may change between Blender releases and this is just a testing
# manifest.
# Additionally, Blender scenes could allow for code execution (e.g. via bundled scripts), so
# running untrusted scenes should not be allowed. This can be achieved for example by adding scenes
# to trusted files or uploading them to a running and attested enclave via secured connection.
sgx.allowed_files.blender_dir = "file:$(BLENDER_DIR)/$(BLENDER_VER)/"
sgx.allowed_files.blender_input = "file:$(DATA_DIR)/scenes/"
sgx.allowed_files.blender_output = "file:$(DATA_DIR)/images/"


libos.entrypoint = "file:$(BLENDER_DIR)/blender"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

loader.preload = "file:$(GRAPHENE_DIR)/Runtime/libsysdb.so"
loader.log_level = "$(GRAPHENE_LOG_LEVEL)"

loader.env.LD_LIBRARY_PATH = "/graphene_lib:/blender_lib:/usr/$(ARCH_LIBDIR):$(ARCH_LIBDIR)"
loader.env.HOME = "/home/user"
# Graphene implicitly copies host environment variables - overwriting troublesome one
loader.env.PWD = ""

fs.mount.graphene_lib.type = "chroot"
fs.mount.graphene_lib.path = "/graphene_lib"
fs.mount.graphene_lib.uri = "file:$(GRAPHENE_DIR)/Runtime"

fs.mount.blender_lib.type = "chroot"
fs.mount.blender_lib.path = "/blender_lib"
fs.mount.blender_lib.uri = "file:$(BLENDER_DIR)/lib"

fs.mount.usr_lib.type = "chroot"
fs.mount.usr_lib.path = "/usr/$(ARCH_LIBDIR)"
fs.mount.usr_lib.uri = "file:/usr/$(ARCH_LIBDIR)"

fs.mount.lib.type = "chroot"
fs.mount.lib.path = "$(ARCH_LIBDIR)"
fs.mount.lib.uri = "file:$(ARCH_LIBDIR)"

fs.mount.scenes.type = "chroot"
fs.mount.scenes.path = "/data"
fs.mount.scenes.uri = "file:$(DATA_DIR)"

fs.mount.blender.type = "chroot"
fs.mount.blender.path = "/blender"
fs.mount.blender.uri = "file:$(BLENDER_DIR)"


sys.stack.size = "8M"

sgx.enclave_size = "2048M"
sgx.thread_num = 64
sgx.nonpie_binary = 1

sgx.trusted_files.blender = "file:$(BLENDER_DIR)/blender"
sgx.trusted_files.ld = "file:$(GRAPHENE_DIR)/Runtime/ld-linux-x86-64.so.2"
sgx.trusted_files.libc = "file:$(GRAPHENE_DIR)/Runtime/libc.so.6"
sgx.trusted_files.libdl = "file:$(GRAPHENE_DIR)/Runtime/libdl.so.2"
sgx.trusted_files.libm = "file:$(GRAPHENE_DIR)/Runtime/libm.so.6"
sgx.trusted_files.libpthread = "file:$(GRAPHENE_DIR)/Runtime/libpthread.so.0"
sgx.trusted_files.libutil = "file:$(GRAPHENE_DIR)/Runtime/libutil.so.1"
sgx.trusted_files.librt = "file:$(GRAPHENE_DIR)/Runtime/librt.so.1"

# Loaded in runtime, ldd doesn't list them.
sgx.trusted_files.libnuma = "file:/usr/$(ARCH_LIBDIR)/libnuma.so.1"
sgx.trusted_files.libGL = "file:$(BLENDER_DIR)/lib/libGL.so.1"
sgx.trusted_files.libglapi = "file:$(BLENDER_DIR)/lib/libglapi.so.0"
sgx.trusted_files.libz = "file:$(ARCH_LIBDIR)/libz.so.1"
sgx.trusted_files.libstdcpp = "file:/usr/$(ARCH_LIBDIR)/libstdc++.so.6"
