# LMBench 2.5 manifest example
#
# This manifest was prepared and tested on Ubuntu 16.04.
#
# This manifest has no specific executable. It's prepared as a generic manifest
# for all LMBench programs. To run a single LMBench test, simply run the command
# under pal_loader:
#
# ./pal_loader <program> <arguments>

# Graphene environment, including the path of the library OS and the debug
# option (inline/none).
loader.preload = file:$(GRAPHENEDIR)/Runtime/libsysdb.so
loader.debug_type = $(GRAPHENEDEBUG)

# Environment variables for LMBench
loader.env.LD_LIBRARY_PATH = /lib:$(ARCH_LIBDIR)

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:$(GRAPHENEDIR)/Runtime

# Host-level libraries (e.g., /lib64) required by tests
fs.mount.lib2.type = chroot
fs.mount.lib2.path = $(ARCH_LIBDIR)
fs.mount.lib2.uri = file:$(ARCH_LIBDIR)

# Mount /bin (mainly needed for running /bin/sh)
fs.mount.bin.type = chroot
fs.mount.bin.path = /bin
fs.mount.bin.uri = file:/bin

# Mount /tmp
fs.mount.tmp.type = chroot
fs.mount.tmp.path = /tmp
fs.mount.tmp.uri = file:/tmp

# Mount /var/tmp
fs.mount.var_tmp.type = chroot
fs.mount.var_tmp.path = /var/tmp
fs.mount.var_tmp.uri = file:/var/tmp

# Mount /usr/include/ (used by LMBench for file tests)
fs.mount.inc.type = chroot
fs.mount.inc.path = /usr/include/
fs.mount.inc.uri = file:/usr/include/

# Network related rules. These rules are used only for sandboxing, which is
# currently an EXPERIMENTAL feature.
net.allow_bind.1 = 0.0.0.0:31233-31237
net.allow_bind.2 = 0.0.0.0:34297-34298
net.allow_peer.1 = 127.0.0.1:0-65535

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If LMBench needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = 256M

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 4

# SGX trusted libraries

# Glibc libraries
sgx.trusted_files.ld = file:$(GRAPHENEDIR)/Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:$(GRAPHENEDIR)/Runtime/libc.so.6
sgx.trusted_files.libm = file:$(GRAPHENEDIR)/Runtime/libm.so.6
sgx.trusted_files.libdl = file:$(GRAPHENEDIR)/Runtime/libdl.so.2
sgx.trusted_files.libpthread = file:$(GRAPHENEDIR)/Runtime/libpthread.so.0

# tirpc libraries
$(TIRPC_TRUSTED_LIBS)

# SGX untrusted (allowed) files/directories
sgx.allowed_files.tmp = file:/tmp
sgx.allowed_files.var_tmp = file:/var/tmp
sgx.allowed_files.inc = file:/usr/include/$(ARCH_LONG)

# Trusted signature for creating child enclaves (by execve())
sgx.trusted_children.hello = file:hello.sig
sgx.trusted_children.sh = file:sh.sig
