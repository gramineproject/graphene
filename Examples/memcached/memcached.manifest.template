# Memcached manifest file example
#
# This manifest was prepared and tested on Ubuntu 18.04.

################################## RUNNING ####################################

# Memcached must be run with the --user=<existing-user-name> argument:
#
# ./pal_loader ./memcached --user=nobody
#
# User argument is required because Graphene currently emulates real/effective
# user ID as 0 (root). This leads Memcached to believe it is run under root. For
# security reasons, Memcached drops privileges and assumes non-privileged user
# ID which must be specified as command-line argument. The assumed user ID is
# irrelevant for consequent Memcached execution, so it may be any existing
# host-OS username (e.g. "nobody" or even "root").

################################## GRAPHENE ###################################

# LibOS layer library of Graphene. There is currently only one implementation,
# so it is always set to libsysdb.so. Note that GRAPHENEDIR macro is expanded
# to relative path to Graphene repository in the Makefile as part of the
# build process.
loader.preload = "file:{{ graphene.libos }}"

# Binary to run.
libos.entrypoint = "file:memcached"

# Verbosity of Graphene debug log (none/error/warning/debug/trace/all). Note
# that GRAPHENE_LOG_LEVEL macro is expanded in the Makefile as part of the
# building process: the default is "error" for non-debug builds, and "debug"
# for debug builds.
loader.log_level = "{{ log_level }}"

################################# ARGUMENTS ###################################

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

################################# ENV VARS ####################################

# Specify paths to search for libraries. The usual LD_LIBRARY_PATH syntax
# applies. Paths must be in-Graphene visible paths, not host-OS paths (i.e.,
# paths must be taken from fs.mount.xxx.path, not fs.mount.xxx.uri).
#
# In case of Memcached:
# - /lib is searched for Glibc libraries (ld, libc, libpthread)
# - {{ arch_libdir }} is searched for Name Service Switch (NSS) libraries
# - /usr/{{ arch_libdir }} is searched for libevent (the only explicit
#                             Memcached dependency)
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

# All other environment variables are unset. This is the default Graphene
# behavior. Memcached doesn't require any environment variables to be set.

################################## SIGNALS ####################################

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = 1

################################# MOUNT FS  ###################################

# General notes:
# - There is only one supported type of mount points: "chroot".
# - Directory names are (somewhat confusingly) prepended by "file:".
# - Names of mount entries (lib, lib2, lib3) are irrelevant but must be unique.
# - In-Graphene visible path names may be arbitrary but we reuse host-OS URIs
#   for simplicity (except for the first "lib" case).

# Mount host-OS directory to Graphene glibc/runtime libraries (in "uri") into
# in-Graphene visible directory /lib (in "path"). Note that GRAPHENEDIR macro
# is expanded to relative path to Graphene repository in the Makefile as part
# of the build process.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

# Mount host-OS directory to Name Service Switch (NSS) libraries (in "uri")
# into in-Graphene visible directory e.g., /lib/x86_64-linux-gnu (in "path").
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# Mount host-OS directory to libevent lib required by Memcached (in "uri")
# into in-Graphene visible directory e.g., /usr/lib/x86_64-linux-gnu (in "path").
fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr/{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr/{{ arch_libdir }}"

# Mount host-OS directory to NSS files required by Glibc + NSS libs (in "uri")
# into in-Graphene visible directory /etc (in "path").
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

############################### SGX: GENERAL ##################################

# Set enclave size (somewhat arbitrarily) to 1024MB. Recall that SGX v1 requires
# to specify enclave size at enclave creation time. If Memcached exhausts these
# 1024MB then it will start failing with random errors. Greater enclave sizes
# result in longer startup times, smaller enclave sizes are not enough for
# typical Memcached workloads.
#
# NOTE: Memcached does not fail explicitly when enclave memory is exhausted.
# Instead, Memcached goes into infinite loop without a listening socket. You
# can trigger this incorrect behavior by increasing the number of threads
# to 12 (each thread requires 128MB of memory): `memcached -t 12`. This is
# an issue in Memcached source code, not related to Graphene.
sgx.enclave_size = "1024M"

sgx.nonpie_binary = 1

# Set maximum number of in-enclave threads (somewhat arbitrarily) to 16. Recall
# that SGX v1 requires to specify the maximum number of simulteneous threads at
# enclave creation time. If Memcached spawns more threads, Graphene-SGX fails.
#
# Note that internally Graphene may spawn two additional threads, one for IPC
# and one for asynchronous events/alarms. Memcached spawns an additional main
# thread which sits idle after spawning worker threads. Therefore, specifying
# '16' allows to run a maximum of 13 Memcached threads (`--threads <= 13`).
sgx.thread_num = 16

############################# SGX: TRUSTED FILES ###############################

# Specify all files used by Memcached and its dependencies (including all
# libraries which can be loaded at runtime via dlopen). The paths to files
# are host-OS paths. These files will be searched for in in-Graphene visible
# paths according to mount points above.
#
# As part of the build process, Graphene-SGX script (`pal-sgx-sign`) finds each
# specified file, measures its hash, and outputs the hash in auto-generated
# entry 'sgx.trusted_checksum.xxx' in auto-generated memcached.manifest.sgx.
# Note that this happens on the developer machine or a build server.
#
# At runtime, during loading of each "trusted file", Graphene-SGX measures its hash
# and compares with the one specified in 'sgx.trusted_checksum.xxx'. If hashes
# match, this file is trusted and allowed to be loaded and used. Note that
# this happens on the client machine.

sgx.trusted_files.memcached = "file:memcached"

sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}/"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"
sgx.trusted_files.usr_arch_libdir = "file:/usr/{{ arch_libdir }}/"

############################# SGX: ALLOWED FILES ###############################

# Specify all non-static files used by app. These files may be opened by
# Graphene-SGX but modifications to them are not detected (Graphene-SGX does
# not measure their hashes). This may pose a security risk!

# Name Service Switch (NSS) files. Glibc reads these files as part of name-
# service information gathering. For more info, see 'man nsswitch.conf'.
sgx.allowed_files.nsswitch  = "file:/etc/nsswitch.conf"
sgx.allowed_files.ethers    = "file:/etc/ethers"
sgx.allowed_files.hosts     = "file:/etc/hosts"
sgx.allowed_files.group     = "file:/etc/group"
sgx.allowed_files.passwd    = "file:/etc/passwd"

# getaddrinfo(3) configuration file. Glibc reads this file to correctly find
# network addresses. For more info, see 'man gai.conf'.
sgx.allowed_files.gaiconf   = "file:/etc/gai.conf"
