# PyTorch manifest template
#
# This manifest was tested on Ubuntu 16.04 and 18.04.
#
# Run the application with:
#
# ./pal_loader pytorch.manifest pytorchexample.py

# The executable to load in Graphene
loader.exec     = file:/usr/bin/python3
loader.execname = python3

# Graphene environment, including the path to the library OS and the debug
# option (inline/none)
loader.preload = file:$(GRAPHENEDIR)/Runtime/libsysdb.so
loader.debug_type = $(GRAPHENEDEBUG)

# Environment variables
loader.env.LD_LIBRARY_PATH = /lib:/usr/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:$(GRAPHENEDIR)/Runtime/

# More libraries required by PyTorch
fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

fs.mount.usr.type = chroot
fs.mount.usr.path = /usr
fs.mount.usr.uri = file:/usr

# Host-level directory to NSS files required by Glibc + NSS libs
fs.mount.etc.type = chroot
fs.mount.etc.path = /etc
fs.mount.etc.uri = file:/etc

# Workload needs to create temporary files
fs.mount.tmp.type = chroot
fs.mount.tmp.path = /tmp
fs.mount.tmp.uri = file:/tmp

# PyTorch loads its pre-trained models from here
fs.mount.torch.type = chroot
fs.mount.torch.path = $(HOME)/.cache/torch
fs.mount.torch.uri = file:$(HOME)/.cache/torch

# When run as `pip install --user ...`, pip installs Python packages here
fs.mount.pip.type = chroot
fs.mount.pip.path = $(HOME)/.local/lib
fs.mount.pip.uri  = file:$(HOME)/.local/lib

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If the workload needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
#
# In particular, libtorch*.so is more than 1G, thus 4G is the minimum to make this run.
sgx.enclave_size = 4G

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
#
# We (somewhat arbitrarily) specify 16 threads for this workload.
sgx.thread_num = 16

# SGX trusted libraries

sgx.trusted_files.ld          = file:$(GRAPHENEDIR)/Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc        = file:$(GRAPHENEDIR)/Runtime/libc.so.6
sgx.trusted_files.libdl       = file:$(GRAPHENEDIR)/Runtime/libdl.so.2
sgx.trusted_files.libm        = file:$(GRAPHENEDIR)/Runtime/libm.so.6
sgx.trusted_files.libpthread  = file:$(GRAPHENEDIR)/Runtime/libpthread.so.0
sgx.trusted_files.libresolv   = file:$(GRAPHENEDIR)/Runtime/libresolv.so.2
sgx.trusted_files.librt       = file:$(GRAPHENEDIR)/Runtime/librt.so.1
sgx.trusted_files.libutil     = file:$(GRAPHENEDIR)/Runtime/libutil.so.1

sgx.trusted_files.libstdc     = file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6
sgx.trusted_files.libgccs     = file:/lib/x86_64-linux-gnu/libgcc_s.so.1
sgx.trusted_files.libaptpkg   = file:/usr/lib/x86_64-linux-gnu/libapt-pkg.so.5.0
sgx.trusted_files.liblz4      = file:/usr/lib/x86_64-linux-gnu/liblz4.so.1
sgx.trusted_files.libsystemd  = file:/lib/x86_64-linux-gnu/libsystemd.so.0
sgx.trusted_files.libselinux  = file:/lib/x86_64-linux-gnu/libselinux.so.1
sgx.trusted_files.libgcrypt   = file:/lib/x86_64-linux-gnu/libgcrypt.so.20
sgx.trusted_files.libpcre     = file:/lib/x86_64-linux-gnu/libpcre.so.3
sgx.trusted_files.libgpgerror = file:/lib/x86_64-linux-gnu/libgpg-error.so.0
sgx.trusted_files.libexpat    = file:/lib/x86_64-linux-gnu/libexpat.so.1
sgx.trusted_files.libz        = file:/lib/x86_64-linux-gnu/libz.so.1
sgx.trusted_files.libz2       = file:/lib/x86_64-linux-gnu/libbz2.so.1.0
sgx.trusted_files.liblzma     = file:/lib/x86_64-linux-gnu/liblzma.so.5
sgx.trusted_files.libmpdec    = file:/usr/lib/x86_64-linux-gnu/libmpdec.so.2

# Ubuntu16.04 sgx.trusted_files.libcrypto = file:/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
# Ubuntu16.04 sgx.trusted_files.libssl    = file:/lib/x86_64-linux-gnu/libssl.so.1.0.0
# Ubuntu18.04 sgx.trusted_files.libcrypto = file:/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
# Ubuntu18.04 sgx.trusted_files.libssl    = file:/usr/lib/x86_64-linux-gnu/libssl.so.1.1

# Name Service Switch (NSS) libraries (Glibc dependencies)
sgx.trusted_files.libnssfiles  = file:/lib/x86_64-linux-gnu/libnss_files.so.2
sgx.trusted_files.libnsscompat = file:/lib/x86_64-linux-gnu/libnss_compat.so.2
sgx.trusted_files.libnssnis    = file:/lib/x86_64-linux-gnu/libnss_nis.so.2
sgx.trusted_files.libnsl       = file:/lib/x86_64-linux-gnu/libnsl.so.1

# The script to run
sgx.trusted_files.script  = file:pytorchexample.py

# required by Python package ctypes (lib/python3.6/lib-dynload/ctypes.cpython-36m-x86_64-linux-gnu.so)
# Ubuntu18.04 sgx.trusted_files.libffi = file:/usr/lib/x86_64-linux-gnu/libffi.so.6

# File containing the classes, i.e., things the classifier has been trained to distinguish between
sgx.trusted_files.classes = file:classes.txt

# File containing the pre-trained model
sgx.trusted_files.torch   = file:$(HOME)/.cache/torch/checkpoints/alexnet-owt-4df8aa71.pth

# Input image
sgx.trusted_files.image   = file:input.jpg

# Scratch space
sgx.allowed_files.tmp     = file:/tmp

# The workload needs to fork/execve; this allows it to do so
sgx.trusted_children.fork = file:python3.sig

# Various locations where Python dependencies are found
sgx.allowed_files.python3    = file:/usr/lib/python3
sgx.allowed_files.pythonhome = file:$(HOME)/.local/lib
# Ubuntu16.04 sgx.allowed_files.python35 = file:/usr/lib/python3.5
# Ubuntu18.04 sgx.allowed_files.python36 = file:/usr/lib/python3.6

# Some Python package wants to access these files on Ubuntu 16.04
# Ubuntu16.04 sgx.allowed_files.aptconfd = file:/etc/apt/apt.conf.d
# Ubuntu16.04 sgx.allowed_files.aptconf  = file:/etc/apt/apt.conf
# Ubuntu16.04 sgx.allowed_files.apport   = file:/etc/default/apport

# Name Service Switch (NSS) files (Glibc reads these files)
sgx.trusted_files.nsswitch     = file:/etc/nsswitch.conf
sgx.trusted_files.group        = file:/etc/group
sgx.trusted_files.passwd       = file:/etc/passwd
