pipeline {
        agent {
            dockerfile { filename 'Jenkinsfiles/ubuntu-18.04.dockerfile'
                         label 'uncledeadly'
                         args "-v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket --device=/dev/gsgx:/dev/gsgx --device=/dev/isgx:/dev/isgx"
                       }
        }
        stages {
                stage('Lint') {
                    steps {
                        sh '''
                            ./.ci/run-pylint -f text || :
                            ./.ci/run-pylint -f json | ./.ci/prfilter

                            ./.ci/run-shellcheck || :
                            ./.ci/run-shellcheck -f json | ./.ci/prfilter
                        '''
                    }
                }
                stage('Build') {
                    steps {
                        sh '''
                           ./Scripts/clean-check-prepare
                        '''
                        sh '''
                            cd Pal/src/host/Linux-SGX/signer/ && openssl genrsa -3 -out enclave-key.pem 3072
                        '''
                        sh '''
                           cd /opt/intel
                           git clone https://github.com/01org/linux-sgx-driver.git
                           cd linux-sgx-driver
                           git checkout 7acda57e771d49d9e2142059b346b778349f653a
                           make

                           cd /opt/intel
                           git clone https://github.com/intel/SGXDataCenterAttestationPrimitives.git
                           cd SGXDataCenterAttestationPrimitives
                           git checkout DCAP_1.6
                           # no need to build, we only need the SGX header file (sgx_oot.h)
                        '''
                        sh '''
                            # test the build with the DCAP driver v1.6 and clean up afterwards
                            cd Pal/src/host/Linux-SGX/sgx-driver
                            ISGX_DRIVER_PATH=/opt/intel/SGXDataCenterAttestationPrimitives/driver/linux make
                            cd ../../../../../
                            make -j 8 SGX=1 WERROR=1
                            make -j 8 SGX=1 clean
                            cd Pal/src/host/Linux-SGX/sgx-driver
                            make distclean
                        '''
                        sh '''
                            cd Pal/src/host/Linux-SGX/sgx-driver
                            ISGX_DRIVER_PATH=/opt/intel/linux-sgx-driver make
                        '''
                        sh '''
                            make -j 8 SGX=1 WERROR=1
                        '''
                    }
                }
                stage('Test') {
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/python-simple
                                PYTHONVERSION=python3.6 make SGX=1
                                PYTHONVERSION=python3.6 make SGX=1 check
                            '''
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/python-scipy-insecure
                                PYTHONVERSION=python3.6 make SGX=1
                                PYTHONVERSION=python3.6 make SGX=1 check
                            '''
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/bash
                                make SGX=1 all
                                make SGX=1 regression
                           '''
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/curl
                                make SGX=1 all
                                make SGX=1 check
                           '''
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh '''
                                cd Examples/gcc
                                make SGX=1 all
                                make SGX=1 check
                           '''
                        }
                        timeout(time: 15, unit: 'MINUTES') {
                            sh '''
                                cd Examples/redis
                                make SGX=1
                                make SGX=1 start-graphene-server &
                                sleep 30
                                ./src/src/redis-benchmark
                            '''
                        }
                        timeout(time: 15, unit: 'MINUTES') {
                            sh '''
                                cd Examples/lighttpd
                                make SGX=1
                                make SGX=1 start-graphene-server &
                                sleep 10
                                LOOP=1 CONCURRENCY_LIST="1 32" ./benchmark-http.sh 127.0.0.1:8003
                            '''
                        }
                        timeout(time: 15, unit: 'MINUTES') {
                            sh '''
                                cd Examples/nginx
                                make SGX=1
                                make SGX=1 start-graphene-server &
                                sleep 30
                                LOOP=1 CONCURRENCY_LIST="1 32" ./benchmark-http.sh 127.0.0.1:8002
                            '''
                        }
                        timeout(time: 25, unit: 'MINUTES') {
                            sh '''
                                cd Examples/apache
                                make SGX=1
                                make SGX=1 start-graphene-server &
                                sleep 30
                                LOOP=1 CONCURRENCY_LIST="1 32" ./benchmark-http.sh 127.0.0.1:8001
                                LOOP=1 CONCURRENCY_LIST="1 32" ./benchmark-http.sh https://127.0.0.1:8443
                            '''
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/blender
                                make SGX=1
                                make SGX=1 check
                           '''
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                cd Examples/ra-tls-mbedtls
                                if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
                                then \
                                    make SGX=1 check_epid RA_CLIENT_SPID=${ra_client_spid} \
                                                          RA_TLS_EPID_API_KEY=${ra_client_key} \
                                                          RA_CLIENT_LINKABLE=0 \
                                                          RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1; \
                                    make SGX=1 check_epid_fail RA_CLIENT_SPID=${ra_client_spid} \
                                                               RA_TLS_EPID_API_KEY=${ra_client_key} \
                                                               RA_CLIENT_LINKABLE=0 \
                                                               RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1; \
                                else \
                                    echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                                    exit 1; \
                                fi
                            '''
                        }
                        sh '''
                           ./Scripts/gitignore-test
                        '''
                        sh '''
                           cd "$(./Scripts/clean-check-test-copy)"

                           rm Pal/src/host/Linux-SGX/signer/enclave-key.pem
                           make SGX=1 distclean

                           make -C Examples/python-simple SGX=1 clean
                           make -C Examples/python-scipy-insecure SGX=1 clean
                           make -C Examples/bash SGX=1 clean
                           make -C Examples/curl SGX=1 clean
                           make -C Examples/gcc SGX=1 distclean
                           make -C Examples/redis SGX=1 distclean
                           make -C Examples/lighttpd SGX=1 distclean
                           make -C Examples/nginx SGX=1 distclean
                           make -C Examples/apache SGX=1 distclean
                           make -C Examples/blender SGX=1 distclean
                           make -C Examples/ra-tls-mbedtls SGX=1 distclean

                           # Currently used release of LTP contains broken symlinks under
                           # utils/ffsb-6.0-rc2/ (config.guess and config.sub); without explicit
                           # rm of these symlinks, the clean-check utility fails. We should
                           # update to newer release of LTP where this issue will be fixed.
                           rm -rf /tmp/graphene-sgx-18.04-apps.clean-check.clean/LibOS/shim/test/ltp/src
                           rm -rf LibOS/shim/test/ltp/src

                           ./Scripts/clean-check
                        '''
                    }
                }
                stage('Deploy') {
                    steps {
                        sh 'echo Deploying code'
                    }
                }
        }
        post {
                success {
                        echo 'Deployment successful'
                }
                failure {
                        echo 'Failure while on the pipeline'
                }
                unstable {
                        echo 'Pipeline marked as "unstable"'
                }
        }
}
