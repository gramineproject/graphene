#!/usr/bin/env python2

import os
import sys
import struct
import array
import socket
from google.protobuf import message as _message
import aesm_pb2

""" Utilities """

def int_to_bytes(i):
    b = ""
    l = 0
    while i > 0:
        b = b + chr(i % 256)
        i = i // 256
        l = l + 1
    return b

def bytes_to_int(b):
    i = 0
    for c in b:
        i = i * 256 + ord(c)
    return i


""" Reading Sigstruct """

def read_sigstruct(sig):
    # field format: (offset, type, value)
    fields = dict()

    fields['date']      = (  20, "<HBB", 'year', 'month', 'day')

    fields['modulus']   = ( 128, "384s", 'modulus')
    fields['exponent']  = ( 512, "<L",   'exponent')
    fields['signature'] = ( 516, "384s", 'signature')

    fields['miscs']     = ( 900, "4s",   'miscs')
    fields['miscmask']  = ( 904, "4s",   'miscmask')
    fields['attrs']     = ( 928, "8s8s", 'flags', 'xfrms')
    fields['attrmask']  = ( 944, "8s8s", 'flagmask', 'xfrmmask')
    fields['mrenclave'] = ( 960, "32s",  'mrenclave')
    fields['isvprodid'] = (1024, "<H",   'isvprodid')
    fields['isvsvn']    = (1026, "<H",   'isvsvn')

    attr = dict()
    for key, field in fields.items():
        values = struct.unpack_from(field[1], sig, field[0])

        for i in range(len(values)):
            attr[field[i + 2]] = values[i]

    return attr

def create_dummy_token(attr):
    # struct.Struct(
        # '<I'     # valid
        # '44B'    # reserved
        # '2Q'     # attributes
        # '32B'    # mrenclave
        # '32B'    # reserved2
        # '32B'    # mrsigner
        # '32B'    # reserved3
        # '2Q'    # cpusvnle
        # 'H'     # isvprodidle
        # 'H'     # isvsvnle
        # '24B'    # reserved4
        # 'I'     # miscselect_mask
        # '2Q'    # attribute_mask
        # '32B'    # keyid
        # '16B'    # mac
    # )
    token = array.array('B', '\0'*304)

    # field format: (offset, type, field in attr)
    fields = dict()

    fields['valid'] = (0, "<I")
    fields['reserved'] = (4, "44B")
    fields['flags'] = (48, "<Q") # attrs
    fields['xfrms'] = (56, "<Q") # attrs
    fields['mrenclave'] = (64, "32B")
    fields['reserved2'] = (96, "32B")
    fields['mrsigner'] = (128, "32B")
    fields['reserved3'] = (160, "32B")
    fields['cpusvnle'] = (192, "<2Q")
    fields['isvprodidle'] = (208, "<H")
    fields['isvsvnle'] = (210, "<H")
    fields['reserved4'] = (212, "24B")
    fields['miscmask'] = (236, "<I")
    fields['flagmask'] = (240, "<Q") # attrmask
    fields['xfrmmask'] = (248, "<Q") # attrmask
    fields['keyid'] = (256, "32B")
    fields['mac'] = (288, "16B")

    actual_fields = ['flags', 'xfrms', 'miscmask']

    for key in actual_fields:
        field = fields[key]
        field_size = struct.Struct(field[1]).size
        token[field[0]:field[0] + field_size] = array.array('B', attr[key])

    return token

""" Main Program """

options = {
#       Option name : (Required  Value)
        'output':    (True,    'output'),
        'sig':       (True,    'sigstruct file'),
    }

def usage():
    usage_message = 'USAGE: ' + sys.argv[0] + ' -help|-h'

    for opt, optval in options.items():
        if not optval[0]:
            usage_message += '['
        usage_message += '|-' + opt
        if optval[1]:
            usage_message += ' <' + optval[1] + '>'
        if not optval[0]:
            usage_message += ']'

    print >> sys.stderr, usage_message
    os._exit(-1)

def parse_args():
    args = dict()
    for opt, optval in options.items():
        if optval[1] is None:
            args[opt] = False

    i = 1
    while i < len(sys.argv):
        got = sys.argv[i]

        if got == '-help' or got == '-h':
            usage()

        invalid = True
        for opt, optval in options.items():
            if got != '-' + opt:
                continue

            if optval[1] is not None:
                i += 1
                if i == len(sys.argv):
                    print >>sys.stderr, "Option %s needs a value." % (opt)
                    usage()
                args[opt] = sys.argv[i]
            else:
                args[opt] = True

            invalid = False
            break

        if invalid:
            print >>sys.stderr, "Unknown option: %s." % (got[1:])
            usage()
        i += 1

    for opt, optval in options.items():
        if optval[0] and opt not in args:
            print >>sys.stderr, "Must specify %s <%s>." % (opt, optval[1])
            usage()

    return args

if __name__ == "__main__":

    # Parse arguments
    args = parse_args()

    attr = read_sigstruct(open(args['sig'], 'rb').read())

    print >>sys.stderr, "Attributes:"
    print >>sys.stderr, "    mrenclave: %s" % (attr['mrenclave'].encode('hex'))
    print >>sys.stderr, "    isvprodid: %d" % (attr['isvprodid'])
    print >>sys.stderr, "    isvsvn:    %d" % (attr['isvsvn'])
    print >>sys.stderr, "    flags:     %016x" % (bytes_to_int(attr['flags']))
    print >>sys.stderr, "    xfrms:     %016x" % (bytes_to_int(attr['xfrms']))
    print >>sys.stderr, "    miscs:     %08x"  % (bytes_to_int(attr['miscs']))
    print >>sys.stderr, "    miscmask:  %08x"  % (bytes_to_int(attr['miscmask']))
    print >>sys.stderr, "    modulus:   %s..." % (attr['modulus'].encode('hex')[:32])
    print >>sys.stderr, "    exponent:  %d" % (attr['exponent'])
    print >>sys.stderr, "    signature: %s..." % (attr['signature'].encode('hex')[:32])

    token = create_dummy_token(attr)
    open(args['output'], 'wb').write(token)
