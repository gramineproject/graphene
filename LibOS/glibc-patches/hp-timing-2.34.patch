diff --git a/sysdeps/x86/hp-timing.h b/sysdeps/x86/hp-timing.h
index 196fef1640ff15f6f2124b1428bc0a0fbe47b0e3..d5ec43631ceb981977c9191c8a6a251ab705b6db 100644
--- a/sysdeps/x86/hp-timing.h
+++ b/sysdeps/x86/hp-timing.h
@@ -17,45 +17,7 @@
    <https://www.gnu.org/licenses/>.  */
 
 #ifndef _HP_TIMING_H
-#define _HP_TIMING_H	1
 
-#include <isa.h>
-
-#if MINIMUM_ISA == 686 || MINIMUM_ISA == 8664
-/* We indeed have inlined functions.  */
-# define HP_TIMING_INLINE	(1)
-
-/* We use 64bit values for the times.  */
-typedef unsigned long long int hp_timing_t;
-
-/* That's quite simple.  Use the `rdtsc' instruction.  Note that the value
-   might not be 100% accurate since there might be some more instructions
-   running in this moment.  This could be changed by using a barrier like
-   'cpuid' right before the `rdtsc' instruciton.  But we are not interested
-   in accurate clock cycles here so we don't do this.
-
-   NB: Use __builtin_ia32_rdtsc directly since including <x86intrin.h>
-   makes building glibc very slow.  */
-# ifdef USE_RDTSCP
-/* RDTSCP waits until all previous instructions have executed and all
-   previous loads are globally visible before reading the counter.
-   RDTSC doesn't wait until all previous instructions have been executed
-   before reading the counter.  */
-#  define HP_TIMING_NOW(Var) \
-  (__extension__ ({				\
-    unsigned int __aux;				\
-    (Var) = __builtin_ia32_rdtscp (&__aux);	\
-  }))
-# else
-#  define HP_TIMING_NOW(Var) ((Var) = __builtin_ia32_rdtsc ())
-# endif
-
-# include <hp-timing-common.h>
-#else
-/* NB: Undefine _HP_TIMING_H so that <sysdeps/generic/hp-timing.h> will
-   be included.  */
-# undef _HP_TIMING_H
 # include <sysdeps/generic/hp-timing.h>
-#endif
 
 #endif /* hp-timing.h */
