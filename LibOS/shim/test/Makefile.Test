# TODO: remove This file
# once graphene-tests rewrite is done, this file should be unnecessary.
# This file is kept for graphene-tests to be happy as workaround

SHIM_TEST_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

SYS ?= $(shell gcc -dumpmachine)
export SYS

PALDIR  = $(SHIM_TEST_DIR)/../../../Pal/src
SHIMDIR = $(SHIM_TEST_DIR)/../src
RUNTIME = $(SHIM_TEST_DIR)/../../../Runtime

ifeq ($(SGX),1)
PAL_LOADER = pal_loader SGX
else
PAL_LOADER = pal_loader
endif

CC = gcc
CXX = g++
CFLAGS =
CXXFLAGS =
LDFLAGS =

CFLAGS-libos = -I$(SHIMDIR)/../include -L$(SHIMDIR)/../../glibc-build/libos

CFLAGS-libos-debug = -I$(SHIMDIR)/../include -I$(PALDIR)/../include/pal -I$(PALDIR)/../lib -fno-builtin -nostdlib
CXXFLAGS-libos-debug = -I$(SHIMDIR)/../include -I$(PALDIR)/../include/pal -I$(PALDIR)/../lib -fno-builtin -nostdlib
LDFLAGS-libos-debug = -L$(SHIMDIR) -L$(PALDIR)/host/$(PAL_HOST) -Wl,-rpath-link=$(abspath $(RUNTIME)) -lpal -lsysdb_debug

.PHONY: default
default: all

include $(SHIM_TEST_DIR)/../../../Scripts/Makefile.configs
include $(SHIM_TEST_DIR)/../../../Scripts/Makefile.rules

expand_target_to_token = $(foreach t,$(filter-out manifest,$(1)),$(patsubst %.manifest,%,$(t)).token)
ifeq ($(SGX),1)
expand_target = $(1) $(foreach t,$(filter-out manifest,$(1)), \
                $(patsubst %.manifest,%,$(t)).manifest.sgx)
else
expand_target = $(1)
endif

.PHONY: all
all: pal_loader $(target) | $(call expand_target,$(exec_target))

.PHONY: sgx-tokens
sgx-tokens: $(call expand_target_to_token,$(exec_target))

# reset CFLAGS, CXXFLAGS which graphene-tests doesn't want
CFLAGS =
CXXFLAGS =

ifeq ($(DEBUG),1)
CC += -g
CXX += -g
endif
export DEBUG

ifeq ($(WERROR),1)
CFLAGS += -Werror
endif

ifeq ($(ABSPATH_IN_MANIFEST),yes)
manifest_rules = \
	-e 's:\$$(PAL):$(abspath $(RUNTIME))/$(PAL_LOADER):g' \
	-e 's:\$$(PWD):$(PWD):g' \
	-e 's:\$$(BIN):$(subst .manifest,,$(notdir $@)):g' \
	-e 's:\$$(SHIMPATH):$(abspath $(RUNTIME))/libsysdb.so:g' \
	-e 's:\$$(LIBCDIR):$(abspath $(RUNTIME)):g' \
	$(extra_rules)
else
manifest_rules= \
	-e 's:\$$(PAL):$(abspath $(RUNTIME))/$(PAL_LOADER):g' \
	-e 's:\$$(PWD):$(PWD):g' \
	-e 's:\$$(BIN):$(subst .manifest,,$(notdir $@)):g' \
	-e 's:\$$(SHIMPATH):'$$RELDIR'$(RUNTIME)/libsysdb.so:g' \
	-e 's:\$$(LIBCDIR):'$$RELDIR'$(RUNTIME):g' \
	$(extra_rules)
endif

pal_loader:
	ln -sf $(RUNTIME)/pal_loader

relative-to = $(shell python -c "import os.path; print os.path.relpath(\"$(abspath $2)\",\"$(abspath $1)\")")

%.manifest: %.manifest.template
	@echo [ $@ ]
	RELDIR=$(filter-out ./,$(call relative-to,$(dir $@),$(shell pwd))/) && \
	sed $(manifest_rules) $< > $@
	(grep -q '^#!' $@ && chmod +x $@) || true

manifest: manifest.template
	@echo [ $@ ]
	sed $(manifest_rules) $< > $@

ifeq ($(SGX),1)
SGX_DIR = $(PALDIR)/host/Linux-SGX
RUNTIME_DIR = $(RUNTIME)

LIBPAL = $(RUNTIME_DIR)/libpal-Linux-SGX.so
SGX_SIGNER_KEY ?= $(SGX_DIR)/signer/enclave-key.pem
SGX_SIGN = $(SGX_DIR)/signer/pal-sgx-sign -libpal $(LIBPAL) -key $(SGX_SIGNER_KEY)
SGX_GET_TOKEN = $(SGX_DIR)/signer/pal-sgx-get-token

# sgx manifest.sgx/sig/token
drop_manifest_suffix = $(filter-out manifest,$(sort $(patsubst %.manifest,%,$(1))))
expand_target_to_token = $(addsuffix .token,$(call drop_manifest_suffix, $(1)))
expand_target_to_sig = $(addsuffix .sig,$(call drop_manifest_suffix,$(1)))
expand_target_to_sgx = $(addsuffix .manifest.sgx,$(call drop_manifest_suffix,$(1)))

%.token: %.sig
	$(call cmd,sgx_get_token)

%.sig %.manifest.sgx: %.manifest % $(LIBPAL) $(SGX_SIGNER_KEY) %.manifest.sgx.d
	$(call cmd,sgx_sign_exec)

%.sig %.manifest.sgx: manifest % $(LIBPAL) $(SGX_SIGNER_KEY) %.manifest.sgx.d
	$(call cmd,sgx_sign_exec)

%.sig %.manifest.sgx: %.manifest $(LIBPAL) $(SGX_SIGNER_KEY) %.manifest.sgx.d
	$(call cmd,sgx_sign)

.PRECIOUS: %.manifest.sgx.d

%.manifest.sgx.d: %.manifest
	$(call cmd,sgx_sign_depend_exec)

%.manifest.sgx.d: manifest
	$(call cmd,sgx_sign_depend)

ifeq ($(filter clean,$(MAKECMDGOALS)),)
include $(addsuffix .manifest.sgx.d,$(call drop_manifest_suffix,$(exec_target)))
endif
endif

.PHONY: clean
clean: $(clean-extra)
	rm -rf pal_loader $(exec_target) *.token *.sig *.manifest.sgx $(target) $(wildcard *.d) .output.*
