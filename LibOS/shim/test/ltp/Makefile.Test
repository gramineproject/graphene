LTP_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

SYS ?= $(shell gcc -dumpmachine)
export SYS

PALDIR  = $(LTP_DIR)/../../../../Pal/src
SHIMDIR = $(LTP_DIR)/../../src
RUNTIME = $(LTP_DIR)/../../../../Runtime

CC = gcc
CXX = g++
CFLAGS =
CXXFLAGS =
LDFLAGS =

.PHONY: default
default: all

expand_target_to_token = $(foreach t,$(filter-out manifest,$(1)),$(patsubst %.manifest,%,$(t)).token)
ifeq ($(SGX),1)
expand_target = $(1) $(foreach t,$(filter-out manifest,$(1)), \
                $(patsubst %.manifest,%,$(t)).manifest.sgx)
else
expand_target = $(1)
endif

.PHONY: all
all: $(target) | $(call expand_target,$(exec_target))

.PHONY: sgx-tokens
sgx-tokens: $(call expand_target_to_token,$(exec_target))

ifeq ($(DEBUG),1)
CC += -g
CXX += -g
endif
export DEBUG

ifeq ($(WERROR),1)
CFLAGS += -Werror
endif

COREUTILS_LIBDIR := /usr/$(ARCH_LIBDIR)/coreutils
ifeq ($(wildcard $(COREUTILS_LIBDIR)/*),)
    COREUTILS_LIBDIR := /usr/libexec/coreutils
    ifeq ($(wildcard $(COREUTILS_LIBDIR)/*),)
        $(error Cannot determine coreutils libdir)
    endif
endif

manifest_rules = \
	-Darch_libdir=$(ARCH_LIBDIR) \
	-Dcoreutils_libdir=$(COREUTILS_LIBDIR) \
	$(extra_rules)

relative-to = $(shell python -c "import os.path; print os.path.relpath(\"$(abspath $2)\",\"$(abspath $1)\")")

%.manifest: %.manifest.template
	@echo [ $@ ]
	RELDIR=$(filter-out ./,$(call relative-to,$(dir $@),$(shell pwd))/) && \
	graphene-manifest \
		-Dentrypoint=$* \
		$(manifest_rules) \
		$< > $@

%.manifest: manifest.template
	@echo [ $@ ]
	graphene-manifest \
		-Dentrypoint=$* \
		$(manifest_rules) \
		$< > $@

ifeq ($(SGX),1)
SGX_DIR = $(PALDIR)/host/Linux-SGX
RUNTIME_DIR = $(RUNTIME)

SGX_SIGNER_KEY ?= $(SGX_DIR)/signer/enclave-key.pem
SGX_SIGN = graphene-sgx-sign --key $(SGX_SIGNER_KEY)
SGX_GET_TOKEN = graphene-sgx-get-token

# sgx manifest.sgx/sig/token
drop_manifest_suffix = $(filter-out manifest,$(sort $(patsubst %.manifest,%,$(1))))
expand_target_to_token = $(addsuffix .token,$(call drop_manifest_suffix, $(1)))
expand_target_to_sig = $(addsuffix .sig,$(call drop_manifest_suffix,$(1)))
expand_target_to_sgx = $(addsuffix .manifest.sgx,$(call drop_manifest_suffix,$(1)))

%.token: %.sig
	@echo [ $@ ]
	@$(SGX_GET_TOKEN) --output $@ --sig $^ > .output.sgx_get_token.$(basename $*)

%.sig %.manifest.sgx: %.manifest $(SGX_SIGNER_KEY) %.manifest.sgx.d
	@echo [ $@ ]
	@$(SGX_SIGN) --output $*.manifest.sgx --manifest $< > .output.sgx_sign.$*

.PRECIOUS: %.manifest.sgx.d

%.manifest.sgx.d: %.manifest
	@echo [ $@ ]
	@$(SGX_SIGN) --depend --output $@ --manifest $<

ifeq ($(filter clean,$(MAKECMDGOALS)),)
include $(addsuffix .manifest.sgx.d,$(call drop_manifest_suffix,$(manifests)))
endif
endif

.PHONY: clean
clean: $(clean-extra)
	$(RM) -r $(manifests) *.token *.sig *.manifest.sgx $(target) $(wildcard *.d) .output.*
