#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-3.0-or-later */
# Copyright (C) 2014 Stony Brook University
# Copyright (C) 2021 Intel Corporation
#                    Micha≈Ç Kowalczyk <mkow@invisiblethingslab.com>

import os
import argparse
from . import _CONFIG_PKGLIBDIR
from . import _sgx_manifest as manifest
from . import _sgx_depend as depend
from . import _sgx_measure as measure
from . import _sgx_sign as sign
from . import _sgx_utility as util

# pylint: enable=invalid-name

# Main Program

argparser = argparse.ArgumentParser()
argparser.add_argument('--output', '-output', metavar='OUTPUT',
                       type=str, required=True,
                       help='Output .manifest.sgx file '
                            '(manifest augmented with autogenerated fields)')
argparser.add_argument('--libpal', '-libpal', metavar='LIBPAL',
                       type=str,
                       help='Input libpal file (by default it gets the installed one)')
argparser.add_argument('--key', '-key', metavar='KEY',
                       type=str, required=True,
                       help='specify signing key(.pem) file')
argparser.add_argument('--manifest', '-manifest', metavar='MANIFEST',
                       type=str, required=True,
                       help='Input .manifest file '
                            '(user-prepared manifest template)')
argparser.add_argument('--depend', '-depend',
                       action='store_true', required=False,
                       help='Generate dependency for Makefile')

argparser.set_defaults(libpal=os.path.join(_CONFIG_PKGLIBDIR, 'sgx/libpal.so'))

def parse_args(args):
    args = argparser.parse_args(args)
    args_dict = {
        'output': args.output,
        'libpal': args.libpal,
        'key': args.key,
        'manifest': args.manifest,
    }
    if args.depend:
        args_dict['depend'] = True
    else:
        # key is required and not found in manifest
        if args.key is None:
            argparser.error('a key is required to sign')
            return None

    return args_dict

def main(args=None):
    args = parse_args(args)
    if args is None:
        return 1

    sigfile = util.get_sigfile_name(args['output'])

    manifest_ = manifest.Manifest(args['manifest'])

    if args.get('depend'):
        depend_generator = depend.DependGenerator(manifest_,
                                           args['libpal'],
                                           args['key'],
                                           sigfile)
        depend_generator.generate()
        return depend_generator.write(args['output'])

    sgx_measurement = measure.EnclaveMeasurement(manifest_,
                                     args['output'],
                                     args['libpal'])
    sgx_measurement.measure_enclave();

    sgx_sign = sign.EnclaveSign(sgx_measurement.get_attr(),
                                sgx_measurement.get_mrenclave_final())
    sgx_sign.gen_sigstruct();
    sgx_sign.gen_signature(args['key']);

    return sgx_sign.write(sigfile)
