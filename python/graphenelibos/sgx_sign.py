#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-3.0-or-later */
# Copyright (C) 2014 Stony Brook University
# Copyright (C) 2021 Intel Corporation
#                    Micha≈Ç Kowalczyk <mkow@invisiblethingslab.com>

import os
import argparse
from . import (
    _CONFIG_PKGLIBDIR,
    sgx_finalize_manifest as manifest,
    sgx_gen_make_deps as depend,
    sgx_gen_sigstruct as sign,
    sgx_measure_enclave as measure,
    sgx_utils as util
    )

# pylint: enable=invalid-name

# Main Program

argparser = argparse.ArgumentParser()
argparser.add_argument('--output', '-output', metavar='OUTPUT',
                       type=str, required=True,
                       help='Output .manifest.sgx file '
                            '(manifest augmented with autogenerated fields)')
argparser.add_argument('--libpal', '-libpal', metavar='LIBPAL',
                       type=str,
                       help='Input libpal file (by default it gets the installed one)')
argparser.add_argument('--key', '-key', metavar='KEY',
                       type=str, required=True,
                       help='specify signing key(.pem) file')
argparser.add_argument('--manifest', '-manifest', metavar='MANIFEST',
                       type=str, required=True,
                       help='Input .manifest file '
                            '(user-prepared manifest template)')
argparser.add_argument('--depend', '-depend',
                       action='store_true', required=False,
                       help='Generate dependency for Makefile')

argparser.set_defaults(libpal=os.path.join(_CONFIG_PKGLIBDIR, 'sgx/libpal.so'))

def parse_args(args):
    args = argparser.parse_args(args)
    args_dict = {
        'output': args.output,
        'libpal': args.libpal,
        'key': args.key,
        'manifest': args.manifest,
    }
    if args.depend:
        args_dict['depend'] = True
    else:
        # key is required and not found in manifest
        if args.key is None:
            argparser.error('a key is required to sign')
            return None

    return args_dict

def main(args=None):
    args = parse_args(args)
    if args is None:
        return 1

    output_manifest = args['output']
    sigfile = util.get_sigfile_name(output_manifest)

    input_manifest = manifest.Manifest(args['manifest'], output_manifest)

    if args.get('depend'):
        dg = depend.DependGenerator(input_manifest, args['libpal'], args['key'], sigfile)
        dg.generate()
        dg.write(output_manifest)
        return 0

    sgx_measurement = measure.EnclaveMeasurement(input_manifest, args['libpal'])
    input_manifest.get_sgx_ra_attr()  # currently only to print info on SGX Remote Attestation
    input_manifest.gen_manifest_sgx_file()
    sgx_measurement.measure_enclave()

    sgx_sigstruct = sign.EnclaveSigstruct(input_manifest.get_sgx_attr(),
                                sgx_measurement.get_mrenclave_final())
    sgx_sigstruct.gen_sigstruct()
    sgx_sigstruct.gen_signature(args['key'])
    sgx_sigstruct.write(sigfile)
    return 0
