stage('test-sgx') {
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/python-simple
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/python-scipy
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/bash
            make ${MAKEOPTS}
            make ${MAKEOPTS} regression
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/curl
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 10, unit: 'MINUTES') {
        sh '''
            cd Examples/gcc
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd Examples/memcached
            make ${MAKEOPTS}
            make SGX=1 start-graphene-server &
            ../../Scripts/wait_for_server 60 127.0.0.1 11211
            # memcslap populates server but doesn't report errors, use
            # memcached-tool for this (must return two lines of stats)
            memcslap --servers=127.0.0.1 --concurrency=8
            src/scripts/memcached-tool 127.0.0.1 | wc -l | grep -w "2"
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            # TODO this logic is to check both epoll and select varants, and probably
            # should be split to check both of those separately and on all distros
            if .ci/isdistro xenial
            then
                USE_SELECT=1
                export USE_SELECT
            fi

            cd Examples/redis
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-graphene-server &
            ../../Scripts/wait_for_server 60 127.0.0.1 6379
            ./src/src/redis-benchmark
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd Examples/lighttpd
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-graphene-server &
            ../../Scripts/wait_for_server 60 127.0.0.1 8003
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8003
        '''
    }
    timeout(time: 15, unit: 'MINUTES') {
        sh '''
            cd Examples/nginx
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-graphene-server &
            ../../Scripts/wait_for_server 60 127.0.0.1 8002
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8002
        '''
    }
    timeout(time: 25, unit: 'MINUTES') {
        sh '''
            cd Examples/apache
            make ${MAKEOPTS}
            make ${MAKEOPTS} start-graphene-server &
            ../../Scripts/wait_for_server 60 127.0.0.1 8001
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8001
            ../../Scripts/wait_for_server 60 127.0.0.1 8443
            LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh https://127.0.0.1:8443
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/blender
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            cd Examples/r
            make ${MAKEOPTS}
            make ${MAKEOPTS} check
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            # test SGX remote attestation only on Ubuntu 18.04 to keep internet requests to minimum
            .ci/isdistro bionic || exit 0

            cd Examples/ra-tls-mbedtls
            if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
            then \
                make check_epid RA_CLIENT_SPID=${ra_client_spid} \
                                        RA_TLS_EPID_API_KEY=${ra_client_key} \
                                        RA_CLIENT_LINKABLE=0; \
                make check_epid_fail RA_CLIENT_SPID=${ra_client_spid} \
                                            RA_TLS_EPID_API_KEY=${ra_client_key} \
                                            RA_CLIENT_LINKABLE=0; \
            else \
                echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                exit 1; \
            fi
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            # test SGX remote attestation only on Ubuntu 18.04 to keep internet requests to minimum
            .ci/isdistro bionic || exit 0

            cd Examples/ra-tls-secret-prov
            if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
            then \
                make SGX=1 check_epid RA_CLIENT_SPID=${ra_client_spid} \
                                        RA_TLS_EPID_API_KEY=${ra_client_key} \
                                        RA_CLIENT_LINKABLE=0; \
            else \
                echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                exit 1; \
            fi
        '''
    }
}
